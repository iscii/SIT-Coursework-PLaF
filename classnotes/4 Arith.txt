Week4 Notes

ARITH (Concrete Syntax)
- expressions inside <angled brackets> are called non-terminals.
- expressions outside (/, *, +, -) are terminals. numbers (non-bracketed) are - terminals.
- <number> = any integer.
- (-<number>) = any negative integer (must include paren.)
- show that 3-2 is generated by the grammar (syntactically correct)... (see lecture code. I don't really understand this)
    - operator MUST be in the middle of two operands

- expressions will produce a tree. they will recurse and evaluate from the leaves up. You can have two technically correct derivation trees, but the tree structure matters - PEMDAS. 3*2-1 can have two diff trees, but one is invalid bc it'll evaluate the minus first, then the times.
- can use a tool to specify precedence
- in 496, we don't care about the ambiguity of the grammar, just whether it's syntactically correct. SO TREE STRUCTURE DOESN'T MATTER HERE... so we don't gotta worry abt PEMDAS? it matters, but not here ig.

Parser turns flat syntax into a tree.
Sub rep. - (node with operand leaves)\
- class list (cdecl list) will always be empty till later in the class ([])
- expr = tree definition. 

type
    prog = AProg of (cdecl list)*expr
and
    expr = 
    | Int of int
    | Sub of expr*expr
    | Div of expr*expr

parse "3-2";; -> prog = AProg ([], Sub (Int 3, Int 2))
parse "3*2/3";; -> prog = AProg ([], Mul (Int 3, Div (Int 2, Int 3))) i think

parse;; -> string -> prog = <fun>

Semantics: how we provide meaning to programs
- specification
  - results: Z + { error (divide by 0) }
  - evaluation judgement (e \||/ r): give an expression e, get a result r
    - Sub(Int4, Int2) \||/ 2
    - Sub(Int4, Int4) \||/ 23 //also a judgement, just not a valid one.
- implementation

Abstract Syntax
- it doesn't matter where the operator is in the expression. ?
3/2 = 3 div 2 = div 3 2


